<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ArcadiusMC</title><link>/</link><description>Recent content on ArcadiusMC</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Jun 2024 00:00:00 +0200</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Server Team</title><link>/wiki/team/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/team/</guid><description>Open positions If you are interested in joining the staff team, we could use help in the following areas:
Coding: helping with the server&amp;rsquo;s custom plugins. Artist: creating server logo variants, PlanetMC server banner, server texture packs, in-game cosmetics, webstore art, collector cards, and so on. Writer: helping to write the player wiki on complex features such as dungeons, factions, custom items, and so on. Server promotion: bringing more attention to the server, for example through Youtube, Twitch or TikTok.</description></item><item><title>Block Usables</title><link>/adminwiki/usables/blocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/usables/blocks/</guid><description>Block usables are usables attached to block entities, they are triggered when you right click the block in question. Other interactions such as breaking, damaging or walking over a block (in the case of pressure plates) are not supported.
Creating a usable block To create a usable block you simply have to add an action or condition to a specified block.
For this example, we&amp;rsquo;ll add a simple show_text action to a chest that&amp;rsquo;ll tell a player &amp;ldquo;Hello, &amp;lt;player name&amp;gt;!</description></item><item><title>Reference</title><link>/adminwiki/usables/ref/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/usables/ref/</guid><description>Reference Types that act as both actions and conditions.
Items Actions:
give_items: Give players items. When giving items, it&amp;rsquo;ll first attempt to insert the items into a player&amp;rsquo;s inventory, if that fails, it simply drops the items at the player&amp;rsquo;s feet. take_items: removes items from any slot in the player&amp;rsquo;s inventory. Conditions:
has_items: Tests if a player has all specified items. does_not_have_items: Tests if a player does NOT have the specified items.</description></item><item><title>Context Values</title><link>/adminwiki/usables/context/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/usables/context/</guid><description>Context values are contextual values that you&amp;rsquo;ll most likely only interact with when writing scripts.
Accessing (via script functions) Context values can be accessed and changed with the following script functions:
getContextValue(name): Gets a context value, or null if the value is not set. requireContextValue(name): Gets a context value, or throws an error if the value is not present. listContextValues(): Gets an array of context value names. setContextValue(name, value): Sets the value of a context entry.</description></item><item><title>Usables Scripting</title><link>/adminwiki/usables/scripts/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/usables/scripts/</guid><description>General You can use scripts with Usables with the script_file or js actions. And scripts can be used as conditions with the test_script or js conditions.
Built in functions Usables script have built in functions:
getData(): Any user-defined data object that is persisted beyond the script&amp;rsquo;s lifetime. setData(data): Sets the script&amp;rsquo;s persistent data, can be any JS object, array or primitive. More built in functions for accessing and modifying interaction context can be found at Context Values.</description></item><item><title>History</title><link>/wiki/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/history/</guid><description>ArcadiusMC was created by JulieWoolie, Oweeennnnn and Robinoh in early January of 2024.
The server&amp;rsquo;s first open beta was launched on the 19th of April 2024</description></item><item><title>Punishments</title><link>/adminwiki/punishing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/punishing/</guid><description/></item><item><title>Titles And Ranks</title><link>/adminwiki/titles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/titles/</guid><description>User titles are simply name prefixes that players can optionally equip. Titles may be gotten in various ways: donating, participating in events, getting advancements.
Titles are mostly managed through permissions. Titles are also split between &amp;rsquo;tiers&amp;rsquo; (Now, these are basically permission groups)
Editing/adding titles Titles and tiers are declared in .yml files located in the Titles plugin&amp;rsquo;s directory.</description></item><item><title>Command Placeholders</title><link>/adminwiki/commandplaceholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/commandplaceholders/</guid><description>Command placeholders are placeholders that can be used as placeholders for actual information in certain places, for example in the console_cmd or player_cmd usables actions.
Arcadius&amp;rsquo; Placeholders Placeholder Description Output Example %player Player&amp;rsquo;s name JulieWoolie %player.block Player&amp;rsquo;s block position 43 23 -135 %player.pos Player&amp;rsquo;s position 43.1564 23.0 -135.156489 %player.worldkey Key of the player&amp;rsquo;s world minecraft:overworld %player.world Name of the player&amp;rsquo;s world world_the_end %player.x Player&amp;rsquo;s X coordinate 234.343452 %player.y Player&amp;rsquo;s Y coordinate 54.</description></item><item><title>Text Placeholders</title><link>/adminwiki/placeholders/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/placeholders/</guid><description>Placeholders are pieces of text that are replaced with other values when sent to a player. For example: You have ${viewer.balances} becomes You have 1,000 Denarii
As a note, since we have PlaceholderAPI installed, all placeholders that plugin supports, are also supported by Arcadius
List of placeholders:
Placeholder Description Output Example ${js: &amp;lt;java script code&amp;gt;} Executes JS code and returns the result as text ${js: 1 + 2 * 3} -&amp;gt; 7 ${script: &amp;lt;script file&amp;gt;} Executes a JS script file and returns the result as text.</description></item><item><title>Contributing</title><link>/wiki/contributing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/wiki/contributing/</guid><description>Anyone who wishes to contribute to this wiki can do so by submitting a pull request to the site&amp;rsquo;s GitHub repository here!.
We will review each contribution to ensure the information is correct and doesn&amp;rsquo;t contain any offensive content.</description></item><item><title>Additional Resources</title><link>/adminwiki/morereading/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/morereading/</guid><description>List of additional resources for the plugins/tools we use. WorldEdit Documentation WorldEdit Brushes WorldEdit Patterns WorldGuard Documentation WorldGuard Flags JavaScript docs (For Scripting) Block Display Studio McStacker (For making commands) BlockBench (For Texture Pack) minecraft.tools Minecraft Wiki</description></item><item><title>Moving forward</title><link>/news/update-2024-06-26/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0200</pubDate><guid>/news/update-2024-06-26/</guid><description>News on how we plan to move forward, and some cut backs</description></item><item><title>2024-04-25 Patch Notes</title><link>/news/patches-2024-04-25/</link><pubDate>Thu, 25 Apr 2024 00:00:00 +0200</pubDate><guid>/news/patches-2024-04-25/</guid><description>Patches and fixed on 2024-04-25</description></item><item><title>2024-04-20 Patch Notes</title><link>/news/patches-2024-04-20/</link><pubDate>Sat, 20 Apr 2024 00:00:00 +0200</pubDate><guid>/news/patches-2024-04-20/</guid><description>Patches and fixed on 2024-04-20</description></item><item><title>Arcadius Beta!</title><link>/news/beta/</link><pubDate>Sun, 07 Apr 2024 11:41:00 +0200</pubDate><guid>/news/beta/</guid><description>Server beta announcement</description></item><item><title>About</title><link>/about/</link><pubDate>Sat, 18 Dec 2021 11:10:36 +0800</pubDate><guid>/about/</guid><description>h1 Heading &amp;#x1f60a; h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading Horizontal Rules Typographic replacements Enable typographer option to see result.
(c) (C) (r) (R) (tm) (TM) (p) (P) +-
test.. test&amp;hellip; test&amp;hellip;.. test?&amp;hellip;.. test!&amp;hellip;.
!!!!!! ???? ,, &amp;ndash; &amp;mdash;
&amp;ldquo;Smartypants, double quotes&amp;rdquo; and &amp;lsquo;single quotes&amp;rsquo;
Emphasis This is bold text
This is bold text
This is italic text
This is italic text
Strikethrough
Blockquotes Blockquotes can also be nested&amp;hellip;</description></item><item><title>Command Search</title><link>/commands/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/commands/</guid><description> Search Show Admin commands Show command metadata</description></item><item><title>Events</title><link>/adminwiki/scripts/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/scripts/events/</guid><description>Examples The following are various examples of how the events object can be used
Simple event registration // Declare the Java type import JoinEvent from &amp;#34;org.bukkit.event.player.PlayerJoinEvent&amp;#34; // Register a function to list to the given event events.register(JoinEvent, onPlayerJoin); // Function called when event is triggered function onPlayerJoin(event) { logger.info(&amp;#34;Player {} joined the server!&amp;#34;, event.player.getName()); } Prioritized listener registration Please see The Bukkit Wiki for information about EventPriority.
// Register a function to list to the given event with the LOWEST // priority events.</description></item><item><title>example.yml</title><link>/adminwiki/dialogues/example1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/dialogues/example1/</guid><description># # Example file of a dialogue tree # # Note: # This file was written to contain as much information as possible, # if you&amp;#39;d like to see a regular use-case example, see &amp;#39;example2.yml&amp;#39; # # # Settings applied to this dialogue tree # # Note: # Including any of these options is not required, they&amp;#39;re all optional # # Note 2: # Settings can be specified in each node to override the file&amp;#39;s # root settings # # - available-format (Optional): # Sets the format used for buttons that are available for players to # click on.</description></item><item><title>Frequently asked questions</title><link>/faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/faq/</guid><description>🔹 Are there any rules? Yes, there are some major rules. You can do /rules ingame.</description></item><item><title>Guide</title><link>/adminwiki/dialogues/guide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/dialogues/guide/</guid><description>Tutorial for creating a basic dialogue. This teaches you how to create the Tribune Tullius NPC infront of the palace door at Latium. (Complete example at the end)
Step 1: The Dialogue File All Dialogue files have their own .yml file located in /plugins/Dialogues/. You can check out the example.yml, however keep in mind, the example file is stuffed with information and is meant more as a reference manual.
To start making Tribune Tullius, we first create the file for him, we&amp;rsquo;ll call it tribune-tullius.</description></item><item><title>Reference</title><link>/adminwiki/dialogues/reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/dialogues/reference/</guid><description>Reference page for dialogue information.
General Settings available-format (Optional) Default: &amp;amp;b&amp;amp;l&amp;gt; &amp;amp;b${buttonText}
Description: Optional setting that determines the format used for available buttons in a dialogue.
Use ${buttonText} placeholder for the actual text the button will show.
Examples available-format: &amp;#34; &amp;amp;b&amp;amp;l&amp;gt; &amp;amp;b${buttonText}&amp;#34; available-format: &amp;#34;&amp;amp;b[${buttonText}]&amp;#34; available-format: &amp;#34;${buttonText}&amp;#34; unavailable-format (Optional) Default: &amp;amp;8&amp;amp;l&amp;gt; &amp;amp;7${buttonText}
Description: Optional setting that determines the format used for unavailable buttons in a dialogue.
Use ${buttonText} placeholder for the actual text the button will show.</description></item><item><title>Task Scheduling</title><link>/adminwiki/scripts/tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/adminwiki/scripts/tasks/</guid><description>ArcadiusMC&amp;rsquo;s scripting abstractions allow for the scheduling of delayed and repeating tasks. All tasks that can be scheduled will be executed on the main thread.
Examples All intervals passed to the scheduler are measured in ticks.
Scheduling a delayed task scheduler.runLater(10 /* Delay in ticks */, task =&amp;gt; { // Perform some action }); Scheduling a repeating task scheduler.runTimer(10 /* Initial Delay */, 10 /* Repeating delay*/, task =&amp;gt; { }); Scheduling a task that only runs n number of times const MAX_RUNS = 20; var runCount = 0; scheduler.</description></item></channel></rss>